import { Fade } from "react-awesome-reveal";

function Pets() {
  return (
    <Fade>
      <div className="container" id="pet" aria-labelledby="pet">
        <h3 className="text-center"> Пэт проекты</h3>
        <div className="card shadow">
          <div className="card-header">
            <nav>
              <div class="nav nav-tabs" id="nav-tab" role="tablist">
                <button
                  class="nav-link active"
                  id="nav-erp-tab"
                  data-bs-toggle="tab"
                  data-bs-target="#nav-erp"
                  type="button"
                  role="tab"
                  aria-controls="nav-erp"
                  aria-selected="true"
                >
                  ERP система
                </button>
                <button
                  class="nav-link"
                  id="nav-stock-tab"
                  data-bs-toggle="tab"
                  data-bs-target="#nav-stock"
                  type="button"
                  role="tab"
                  aria-controls="nav-stock"
                  aria-selected="false"
                >
                  Автоматизированная торговля акциями
                </button>
                <button
                  class="nav-link"
                  id="nav-spring-tab"
                  data-bs-toggle="tab"
                  data-bs-target="#nav-spring"
                  type="button"
                  role="tab"
                  aria-controls="nav-spring"
                  aria-selected="false"
                >
                  Система автоматической навивки
                </button>
              </div>
            </nav>
          </div>
          <div className="card-body">
            <div class="tab-content" id="nav-tabContent">
              <div
                class="tab-pane fade show active"
                id="nav-erp"
                role="tabpanel"
                aria-labelledby="nav-erp-tab"
                tabindex="0"
              >
                <h5 className="card-title">Разработка ERP Системы.</h5>
                <hr></hr>
                <h6 className="card-subtitle">Проблема.</h6>
                <p>
                  Главные проблемы на предприятии были связанны с
                  взаимодействием офиса с заказчиками и цехом. Для принятия и
                  контроля выполнения заявок и передачи работы в цех требовалось
                  много ручной работы. Страдали сроки и появлялось поле для
                  ошибок.
                </p>
                <hr></hr>
                <h6 className="card-subtitle">Решение.</h6>
                <p>
                  Проработал и стандартизировал рабочие процессы для дальнейшей
                  автоматизации. Работу по автоматизации разбил на этапы:
                  <li>
                    Автоматизация процессов в офисе с ручным разбором входящих
                    заявок от заказчиков, ручной выдачей задач в цех;
                  </li>
                  <li> Автоматизация выдачи задач в цех и их контроля;</li>
                  <li>Автоматизация принятия заявок от заказчиков.</li>
                  <p>
                    Таким образом, офис приобретает статус консультатитвного
                    органа, который отслеживает недоработки системы для их
                    последующего решения в виде формализации процесса и его
                    автоматизации. Данное решение позволило бы сократить срок
                    выполнения заявок, убрать человеческий фактор, что
                    положительно скажется на имидже компании и прибыли.
                  </p>
                </p>

                <p>Данный проект все еще в разработке.</p>
                <hr></hr>
                <h6 className="card-subtitle">Используемые технологии:</h6>
                <li>
                  backend: Node.js, Apollo-Server, Apollo-Federation, Express
                </li>
                <li>frontend: React, Apollo-Client</li>
                <li>
                  Другие технологии: Docker, Kubernetes, Nats streaming server
                </li>
              </div>
              <div
                class="tab-pane fade"
                id="nav-stock"
                role="tabpanel"
                aria-labelledby="nav-stock-tab"
                tabindex="0"
              >
                <h5 className="card-title">
                  Разработка системы для автоматической торговли акциями.
                </h5>
                <hr></hr>
                <h6 className="card-subtitle">Проблема:</h6>
                <p>
                  Разрабатывал автоматизированную систему торговли на бирже для
                  оттачивания навыков и извлечения прибыли (один из моих
                  серьезных pet-проектов). Главное условие: не пользоваться
                  готовыми решениями.
                </p>
                <hr></hr>
                <h6 className="card-subtitle">Решение:</h6>{" "}
                <p>
                  Банк Тинькофф выпустил API для связи с Тинькофф-Инвестициями,
                  с помощью которой можно получить данные по счету,
                  инструментам, а также открывать и закрывать заявки на
                  куплю-продажу акций, облигаций и других ценных бумаг. На
                  начало работы была первая версия API, к которой можно было
                  подключиться через SDK, используя Node.js.
                </p>
                <hr></hr>
                <h6 className="card-subtitle">
                  Реализованы следующие функции:
                </h6>
                <li>
                  Получение инструментов на балансе, получение акций и истории
                  котировок;
                </li>
                <li>
                  Получение котировок в реальном времени. Формировалась
                  специальная очередь типа «первый вошел - последний вышел».
                  Сперва подгружались исторические данные котировок, а затем с
                  помощью SDK подгружалась актуальная свеча. Когда свеча
                  устаревала (т.к. они имеют временные рамки 1 мин, 5 мин, 30
                  мин и т.д.), новая свеча добавлялась в очередь, а самая старая
                  свеча из очереди удалялась;
                </li>
                <li>
                  Подсчет различных функций технического анализа. Данные из
                  очереди подгружались в специальный модуль, который выдавал
                  результаты расчетов желаемых инструментов технического
                  анализа;
                </li>
                <li>
                  Создание стратегий на основе результатов расчета инструментов
                  технического анализа и генерация сигналов к покупке и продаже
                  инструментов;
                </li>
                <li>Покупка и продажа инструментов.</li>
                <p>
                  Ввиду специфики API и условий ограниченного времени
                  приостановил проект до релиза API v2.0, которая решала бы все
                  проблемы первой версии (самая главная— отслеживание статуса
                  заявок).
                </p>
                <hr></hr>
                <h6 className="card-subtitle">Используемые технологии:</h6>
                <p>Node.js, TinkoffAPI v1.0, библиотеки технического анализа</p>
                <hr></hr>
                <h6 className="card-subtitle">Второй виток работы.</h6>
                <p>
                  Когда банк Тинькофф выпустил версию API v2.0, которая
                  претерпела множество изменений, я решил сменить стек
                  технологий.
                </p>
                <hr></hr>
                <h6 className="card-subtitle">
                  Реализованы все те же функции, что и в первой версии проекта,
                  но со следующими изменениями:
                </h6>
                <li>
                  Для параметров стратегий создан модуль оптимизации на основе
                  генетических алгоритмов;
                </li>
                <li>
                  Проведены эксперименты с LSTM нейронными сетями с помощью
                  tensorflow.
                </li>
                <p>Проект все еще в разработке. </p>
                <hr></hr>
                <h6 className="card-subtitle">Используемые технологии:</h6>
                <p>
                  Python, TinkoffAPI v2.0, numpy, pandas, tensorflow, keras,
                  PyGAD, ta, matplotlib
                </p>
              </div>
              <div
                class="tab-pane fade"
                id="nav-spring"
                role="tabpanel"
                aria-labelledby="nav-spring-tab"
                tabindex="0"
              >
                <h5 className="card-title">
                  Система автоматизированной навивки пружин
                </h5>
                <h6 className="card-subtitle">Проблема:</h6>
                <p>
                  Предприятие занимается изготовлением упругих элементов из
                  проволоки.
                </p>
                <p>
                  Первый этап работы — наладка пружинонавивочного автомата. От
                  того, как точно и качественно будет настроен автомат, зависит
                  дальнейшая работа.
                </p>
                <p>
                  Для настройки станка наладчику требуется сперва установить
                  инструмент, заправить проволоку, а затем настроить на станке
                  около 15 различных (часто связанных между собой) параметров,
                  для получения диаметра и шага пружины.
                </p>
                <hr></hr>
                <h6 className="card-subtitle">Решение:</h6>
                <p>
                  Первые опыты производил на существующем оборудовании с
                  минимизацией параметров настройки: выбрал два наиболее
                  значимых параметра. Для проведения опытов с шагом 0,1
                  потребовалось бы около 1 000 000 замеров, но для сбора
                  необходимых данных хватило всего 30.
                </p>

                <p>
                  Каждый замер представлял собой установку параметров с
                  дальнейшим замером параметров готового изделия.
                </p>
                <p>
                  Пары провел через простую полносвязанную нейронную сеть на
                  tensorflow.
                </p>
                <p>
                  Натренировав нейронную сеть на ограниченном количестве данных,
                  провел проверку гипотезы. Проверка показала, что опыт применим
                  на практике: сокращает время на наладку и обеспечивает
                  повторяемость.
                </p>
                <p>
                  В дальнейшем планирую написать специальный софт для управления
                  более 20 сервомоторами и создать стенд для отработки.
                </p>
                <p>Данный проект все еще в разработке</p>
                <hr></hr>
                <h6>Стек технологий</h6>
                <p>Python, tensorflow, keras, numpy, pandas</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Fade>
  );
}

export default Pets;
