import { Fade } from "react-awesome-reveal";

function Pets() {
  return (
    <Fade>
      <div className="container" id="pet" aria-labelledby="pet">
        <h3 className="text-center"> Пэт проекты</h3>
        <div className="card shadow">
          <div className="card-header">
            <nav>
              <div class="nav nav-tabs" id="nav-tab" role="tablist">
                <button
                  class="nav-link active"
                  id="nav-erp-tab"
                  data-bs-toggle="tab"
                  data-bs-target="#nav-erp"
                  type="button"
                  role="tab"
                  aria-controls="nav-erp"
                  aria-selected="true"
                >
                  ERP система
                </button>
                <button
                  class="nav-link"
                  id="nav-stock-tab"
                  data-bs-toggle="tab"
                  data-bs-target="#nav-stock"
                  type="button"
                  role="tab"
                  aria-controls="nav-stock"
                  aria-selected="false"
                >
                  Автоматизированная торговля акциями
                </button>
                <button
                  class="nav-link"
                  id="nav-spring-tab"
                  data-bs-toggle="tab"
                  data-bs-target="#nav-spring"
                  type="button"
                  role="tab"
                  aria-controls="nav-spring"
                  aria-selected="false"
                >
                  Система автоматической навивки
                </button>
              </div>
            </nav>
          </div>
          <div className="card-body">
            <div class="tab-content" id="nav-tabContent">
              <div
                class="tab-pane fade show active"
                id="nav-erp"
                role="tabpanel"
                aria-labelledby="nav-erp-tab"
                tabindex="0"
              >
                <h5 className="card-title">Разработка ERP Системы.</h5>
                <hr></hr>
                <h6 className="card-subtitle">Проблема.</h6>
                <p>
                  На предприятии, где я работал, было множество проблем, касаемо
                  взаимодействия офиса с заказчиками и цехом. Для принятия
                  заявок, контроля их выполнения, передачи работы в цех
                  требовалось много ручной работы. Из-за чего страдали сроки,
                  появлялось поле для ошибок.
                </p>
                <hr></hr>
                <h6 className="card-subtitle">Решение.</h6>
                <p>
                  Логичным решением оказалось проработка и стандартизация
                  рабочих процессов для дальнейшей автоматизации. Работа была
                  разбита на следующие этапы:
                  <li>
                    Автоматизация процессов в офисе с ручным разбором входящих
                    заявок от заказчиков, ручной выдачей задач в цех
                  </li>
                  <li> Автоматизация выдачи задач в цех и их контроля</li>
                  <li>Автоматизация принятия заявок от заказчиков</li>
                  Таким образом, офис приобретает статус консультатитвного
                  органа, который отслеживает недоработки системы для их
                  последующего решения в виде формализации процесса и его
                  автоматизации. Данное решение позволило бы сократить срок
                  выполнения заявок, убрать человеческий фактор, что
                  положительно скажется на имидже компании и прибыли.
                </p>
                <p>Данный проект все еще в разработке.</p>
                <hr></hr>
                <h6 className="card-subtitle">Используемые технологии:</h6>
                <li>
                  backend: Node.js, Apollo-Server, Apollo-Federation, Express
                </li>
                <li>frontend: React, Apollo-Client</li>
                <li>
                  Другие технологии: Docker, Kubernetes, Nats streaming server
                </li>
              </div>
              <div
                class="tab-pane fade"
                id="nav-stock"
                role="tabpanel"
                aria-labelledby="nav-stock-tab"
                tabindex="0"
              >
                <h5 className="card-title">
                  Разработка системы для автоматической торговли акциями.
                </h5>
                <hr></hr>
                <h6 className="card-subtitle">Проблема:</h6>
                <p>
                  Один из моих серьезных пэт проектов. Для оттачивания навыков и
                  извлечения прибыли было принято решение разработать
                  автоматизированную систему торговли на бирже. Но при этом не
                  было желания пользоваться готовыми решениями.
                  <hr></hr>
                  <h6 className="card-subtitle">Решение:</h6> Банк Тинькофф
                  выпустил API для связи с Тинькофф-Инвестициями, с помощью
                  которой можно получить данные по счету, инструментам, а также
                  открывать и закрывать заявки на куплю-продажу акций, облигаций
                  и других финансовых инструментов. На начало работы была первая
                  версия API, к которой можно было подключиться через SDK,
                  используя Node.js.
                </p>
                <hr></hr>
                <h6 className="card-subtitle">
                  Были реализованы следующие функции:
                </h6>
                <li>
                  Получение инструментов на балансе, получение акций и истории
                  котировок.
                </li>
                <li>
                  Реализация получения котировок в реальном времени.
                  Формировалась специальная очередь типа первый вошел -
                  последний вышел. Сперва подгружались исторические данные
                  котировок, а затем с помощью SDK подгружалась актуальная
                  свеча. Когда свеча устаревала (т.к. они имеют временные рамки
                  1мин, 5мин, 30мин и т.д.), то новая свеча добавлялась в
                  очередь, а самая старая свеча из нее удалялась.
                </li>
                <li>
                  Подсчет различных функций технического анализа. В специальный
                  модуль подгружались данные из очереди, который выдавал
                  результаты расчетов желаемых инструментов технического
                  анализа.
                </li>
                <li>
                  Создание стратегий на основе результатов расчета инструментов
                  технического анализа и генерация сигналов к покупке и продаже
                  инструментов.
                </li>
                <li>Реализация покупки и продажи инструментов.</li>
                <p>
                  Ввиду специфики API и ограниченного времени было принято
                  решение приостановить проект, в ожидании API v2.0, которая бы
                  решала все проблемы первой версии (самая главная проблема -
                  отслеживание статуса заявок)
                </p>
                <hr></hr>
                <h6 className="card-subtitle">Используемые технологии:</h6>
                <p>Node.js, TinkoffAPI v1.0, библиотеки технического анализа</p>
                <hr></hr>
                <h6 className="card-subtitle">Второй виток работы.</h6>
                <p>
                  Затем банк Тинькофф выпустил версию API v2.0, которая
                  претерпела множество изменений. Было приянто решение сменить
                  стек технологий.
                </p>
                <hr></hr>
                <h6 className="card-subtitle">
                  Были реализованы все те же функции, реализованные в первой
                  версии проекта, но со следующими изменениями:
                </h6>
                <li>
                  Для параметров стратегий был создан модуль оптимизации на
                  основе генетических алгоритмов
                </li>
                <li>
                  Были проведены эксперименты с LSTM нейронными сетями с помощью
                  tensorflow
                </li>
                <p>Проект все еще в разработке. </p>
                <hr></hr>
                <h6 className="card-subtitle">Используемые технологии:</h6>
                <p>
                  Python, TinkoffAPI v2.0, numpy, pandas, tensorflow, keras,
                  PyGAD, ta, matplotlib
                </p>
              </div>
              <div
                class="tab-pane fade"
                id="nav-spring"
                role="tabpanel"
                aria-labelledby="nav-spring-tab"
                tabindex="0"
              >
                <h5 className="card-title">
                  Система автоматизированной навивки пружин
                </h5>
                <h6 className="card-subtitle">Проблема:</h6>
                <p>
                  Предприятие, на котром я работал, занимается изготовлением
                  упругих элементов из проволоки.
                </p>
                <p>
                  Первым этапом работы является наладка пружинонавивочного
                  автомата. От того, как точно и качественно будет настроен
                  автомат, будет зависить дальнейшая работа.
                </p>
                <p>
                  Для настройки станка наладчику требуется для начала установить
                  инструмент, заправить проволоку, а затем настроить на станке
                  около 15 различных (часто связанных между собой) параметров,
                  для получения диаметра и шага пружины.
                </p>
                <hr></hr>
                <h6 className="card-subtitle">Решение:</h6>
                <p>
                  Для решения данной проблемы было принято решение произвести
                  первые опыты на существующем оборудовании с минимализацией
                  параметров настройки
                </p>
                <p>
                  Для опытов было выбрано два наиболее значащих параметра. Для
                  проведения опытов с шагом 0,1 потребовалось бы около 1 000 000
                  замеров. Вместо этого было проведено всего 30.{" "}
                </p>
                <p>
                  Каждый замер представял собой установку параметров с
                  дальнейшим замером параметров готового изделия.
                </p>
                <p>
                  Пары были проведены через простую полносвязанную нейронную
                  сеть на tensorflow
                </p>
                <p>
                  Натренировав нейронную сеть на таком малом количестве данных,
                  была проведена проверка гипотизы, которая показала
                  великолепный результат
                </p>
                <p>
                  Для дальнейшей работы планируется написать специальный софт
                  для управления более 20 сервомоторами, а также создать стенд
                  для отработки.
                </p>
                <p>Данный проект все еще в разработке</p>
                <hr></hr>
                <h6>Стек технологий</h6>
                <p>Python, tensorflow, keras, numpy, pandas</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Fade>
  );
}

export default Pets;
